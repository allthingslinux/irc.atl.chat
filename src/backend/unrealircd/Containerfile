# ============================================================================
# BUILD STAGE - Compile UnrealIRCd from source
# ============================================================================
FROM alpine:3.22 AS builder

# Build arguments
ARG UNREALIRCD_VERSION=6.2.0.1
ARG UID=0
ARG GID=0

# Install build dependencies
# hadolint ignore=DL3018
RUN apk update && apk add --no-cache \
    build-base \
    wget \
    pkgconfig \
    openssl \
    openssl-dev \
    pcre2-dev \
    c-ares-dev \
    curl-dev \
    argon2-dev \
    libsodium-dev \
    jansson-dev \
    cmake \
    file

# Create unrealircd user (skip if UID is 0)
RUN if [ "${UID}" != "0" ]; then \
    addgroup -g ${GID} unrealircd && \
    adduser -D -u ${UID} -G unrealircd -s /bin/false unrealircd; \
    fi

# Create installation directory
RUN mkdir -p /home/unrealircd/unrealircd

# Download and extract UnrealIRCd source
WORKDIR /tmp
RUN wget --progress=dot:giga https://www.unrealircd.org/downloads/unrealircd-${UNREALIRCD_VERSION}.tar.gz && \
    tar xzf unrealircd-${UNREALIRCD_VERSION}.tar.gz

# Create build user (UnrealIRCd refuses to build as root)
RUN addgroup -g 1001 builduser && \
    adduser -D -u 1001 -G builduser builduser && \
    mkdir -p /home/unrealircd && \
    chown -R builduser:builduser /tmp/unrealircd-${UNREALIRCD_VERSION} /home/unrealircd

# Switch to build user and configure
WORKDIR /tmp/unrealircd-${UNREALIRCD_VERSION}
USER builduser

# Copy configuration settings
COPY config.settings .

# Configure UnrealIRCd build
RUN ./Config -quick

# Compile UnrealIRCd
RUN make -j"$(nproc)"

# Install UnrealIRCd
RUN make install

# ============================================================================
# RUNTIME STAGE - Minimal production container
# ============================================================================
FROM alpine:3.22

# Runtime arguments
ARG UID=0
ARG GID=0

# Install runtime dependencies
# hadolint ignore=DL3018
RUN apk update && apk add --no-cache \
    openssl \
    pcre2 \
    c-ares \
    curl \
    ca-certificates \
    ca-certificates-bundle \
    tini \
    su-exec \
    netcat-openbsd \
    argon2-libs \
    libsodium \
    jansson

# Create unrealircd user with specific UID/GID
RUN if [ "${UID}" = "0" ]; then \
    addgroup -g 1000 unrealircd && \
    adduser -D -u 1000 -G unrealircd -s /bin/false unrealircd; \
    else \
    addgroup -g ${GID} unrealircd && \
    adduser -D -u ${UID} -G unrealircd -s /bin/false unrealircd; \
    fi

# Copy built application from builder stage
COPY --from=builder /home/unrealircd/unrealircd /home/unrealircd/unrealircd

# Set ownership based on UID/GID arguments
RUN if [ "${UID}" = "0" ]; then \
    chown -R 1000:1000 /home/unrealircd/unrealircd; \
    else \
    chown -R ${UID}:${GID} /home/unrealircd/unrealircd; \
    fi

# Create directory structure with proper permissions
RUN mkdir -p /home/unrealircd/unrealircd/conf \
    /home/unrealircd/unrealircd/logs \
    /home/unrealircd/unrealircd/data \
    /home/unrealircd/unrealircd/cache \
    /home/unrealircd/unrealircd/tmp \
    /run/unrealircd && \
    if [ "${UID}" = "0" ]; then \
    chown -R 1000:1000 /home/unrealircd/unrealircd && \
    chown -R 1000:1000 /run/unrealircd; \
    else \
    chown -R ${UID}:${GID} /home/unrealircd/unrealircd && \
    chown -R ${UID}:${GID} /run/unrealircd; \
    fi && \
    chmod -R 755 /home/unrealircd/unrealircd && \
    chmod 755 /run/unrealircd

# Copy entrypoint script
COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Set working directory
WORKDIR /home/unrealircd/unrealircd

# Expose IRC ports
EXPOSE 6667 6697 6900 8600 8000

# Health check - verify IRC server is responding
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD su-exec unrealircd nc -z localhost 6667 || exit 1

# Switch to unrealircd user for security
USER unrealircd

# Use tini as init system with child subreaper
# Entrypoint handles permissions and user switching
ENTRYPOINT ["/sbin/tini", "-s", "--", "/usr/local/bin/docker-entrypoint.sh"]
CMD ["start"]