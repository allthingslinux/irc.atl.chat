# ============================================================================
# BUILD STAGE - Compile Atheme from source
# ============================================================================
FROM alpine:3.22 AS builder

# Build arguments
ARG ATHEME_VERSION="master"

# Install build dependencies
# hadolint ignore=DL3018
RUN apk add --no-cache \
    build-base \
    pkgconf \
    openssl-dev \
    libidn-dev \
    git \
    autoconf \
    automake \
    libtool \
    gettext-dev

# Download and build Atheme
WORKDIR /usr/src

# Clone Atheme source with submodules
RUN git clone https://github.com/atheme/atheme -b "${ATHEME_VERSION}" --depth=1 atheme-src --recursive

# Update libmowgli submodule
WORKDIR /usr/src/atheme-src/libmowgli-2
RUN git pull origin master

# Configure, build, and install Atheme
WORKDIR /usr/src/atheme-src
RUN sed -i "s/@MKDIR_P@/mkdir -p/g" /usr/src/atheme-src/modules/contrib/buildsys.mk.in && \
    ./configure \
    --prefix=/usr/local/atheme \
    --enable-contrib \
    --with-modulesdir=/usr/local/atheme/modules \
    --with-libidn \
    --enable-large-net \
    --disable-linker-defs && \
    make -j"$(nproc)" && \
    make install

# ============================================================================
# RUNTIME STAGE - Minimal production container
# ============================================================================
FROM alpine:3.22

# Runtime arguments
ARG UID=1000
ARG GID=1000

# Install runtime dependencies
# hadolint ignore=DL3018
RUN apk add --no-cache \
    openssl \
    libidn \
    ca-certificates \
    tini

# Create atheme user with specific UID/GID
RUN addgroup -g ${GID} -S atheme && \
    adduser -u ${UID} -D -S -G atheme atheme

# Copy built application from builder stage
COPY --from=builder /usr/local/atheme /usr/local/atheme

# Create directory structure with proper permissions
RUN mkdir -p /usr/local/atheme/etc \
    /usr/local/atheme/data \
    /usr/local/atheme/logs \
    /usr/local/atheme/logs/atheme \
    /usr/local/atheme/var && \
    chown -R atheme:atheme /usr/local/atheme

# Copy entrypoint script
COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Set working directory
WORKDIR /usr/local/atheme

# Health check - verify Atheme services are running
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD pgrep -f atheme-services > /dev/null || exit 1

# Switch to atheme user for security
USER atheme

# Use tini as init system
# Entrypoint handles service startup
ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/docker-entrypoint.sh"]
