---
name: "irc.atl.chat"

services:
  # ============================================================================
  # UNREALIRCD - Main IRC Server
  # ============================================================================
  unrealircd:
    # Build configuration
    build:
      context: ./src/backend/unrealircd
      dockerfile: Containerfile
      args:
        UNREALIRCD_VERSION: ${UNREALIRCD_VERSION:-6.2.0.1}
        UID: ${PUID:-1000}
        GID: ${PGID:-1000}

    # Container configuration
    container_name: unrealircd
    hostname: unrealircd
    init: true 

    # Dependencies
    # (none - this is the primary service)

    # Volume mounts - aligned with Containerfile paths
    volumes:
      - ./src/backend/unrealircd/conf:/home/unrealircd/unrealircd/conf
      - ./logs/unrealircd:/home/unrealircd/unrealircd/logs
      - ./data/unrealircd:/home/unrealircd/unrealircd/data

    # Environment variables
    environment:
      - TZ=UTC
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}

    # Port mappings
    ports:
      - '${IRC_PORT:-6667}:6667'              # Standard IRC port
      - '${IRC_TLS_PORT:-6697}:6697'          # IRC over SSL/TLS
      - '${IRC_SERVER_PORT:-6900}:6900'       # Server-to-server TLS
      - '${IRC_RPC_PORT:-8600}:8600'          # JSON-RPC API
      - '${IRC_WEBSOCKET_PORT:-8000}:8000'    # WebSocket for web IRC clients

    # Network configuration
    networks:
      - irc-network

    # Restart policy
    restart: unless-stopped

    # Health monitoring
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '6667']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Graceful shutdown
    stop_grace_period: 60s

  # ============================================================================
  # ATHEME - IRC Services (NickServ, ChanServ, etc.)
  # ============================================================================
  atheme:
    # Build configuration
    build:
      context: ./src/backend/atheme
      dockerfile: Containerfile
      args:
        UID: ${PUID:-1000}
        GID: ${PGID:-1000}

    # Container configuration
    container_name: atheme
    hostname: atheme

    # Dependencies
    depends_on:
      unrealircd:
        condition: service_healthy
        restart: true

    # Volume mounts
    volumes:
      - ./src/backend/atheme/conf:/usr/local/atheme/etc:ro
      - ./data/atheme:/usr/local/atheme/data
      - ./logs/atheme:/usr/local/atheme/logs

    # Environment variables
    environment:
      - TZ=UTC
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}

    # Network configuration
    networks:
      - irc-network

    # Restart policy
    restart: unless-stopped

    # Health monitoring
    healthcheck:
      test: ['CMD', 'pgrep', '-f', 'atheme-services']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Security: Run as non-root user
    user: "${PUID:-1000}:${PGID:-1000}"

  # ============================================================================
  # UNREALIRCD WEBPANEL - Web-based Administration Interface
  # ============================================================================
  unrealircd-webpanel:
    # Build configuration
    build:
      context: .
      dockerfile: src/frontend/webpanel/Containerfile

    # Container configuration
    container_name: unrealircd-webpanel
    hostname: unrealircd-webpanel

    # Dependencies
    depends_on:
      unrealircd:
        condition: service_healthy

    # Volume mounts
    volumes:
      - unrealircd-webpanel-data:/var/www/html/unrealircd-webpanel/data

    # Environment file
    env_file:
      - .env

    # Environment variables
    environment:
      - TZ=UTC

    # Port mappings
    ports:
      - '${WEBPANEL_PORT:-8080}:8080'

    # Network configuration
    networks:
      - irc-network

    # Restart policy
    restart: unless-stopped

    # Health monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # SSL MONITOR - Automated Certificate Management via Let's Encrypt
  # ============================================================================
  ssl-monitor:
    # Image configuration
    image: alpine:latest

    # Container configuration
    container_name: ssl-monitor
    hostname: ssl-monitor

    # Dependencies
    # (none - runs independently)

    # Volume mounts
    volumes:
      - ./scripts:/scripts:ro                    # SSL management scripts (read-only)
      - ./src/backend/unrealircd/conf/tls:/tls       # SSL certificates directory
      - ./data/letsencrypt:/letsencrypt           # Let's Encrypt data
      - ./cloudflare-credentials.ini:/cloudflare-credentials.ini:ro  # Cloudflare API credentials

    # Environment file
    env_file:
      - .env

    # Environment variables
    environment:
      - TZ=UTC
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-admin@allthingslinux.org}
      - IRC_DOMAIN=${IRC_DOMAIN:-irc.atl.chat}

    # Network configuration
    networks:
      - irc-network

    # Restart policy
    restart: unless-stopped

    # Command: Simple monitoring loop
    command: >
      sh -c "
        apk add --no-cache openssl curl &&
        echo 'SSL Monitor started - checking certificates daily' &&
        while true; do
          echo \"[$$(date)] Checking SSL certificates...\";
          /scripts/ssl-manager.sh check >> /tmp/ssl-monitor.log 2>&1;

          # Check for renewal at 2 AM
          if [ \"$$(date +%H)\" = \"02\" ]; then
            echo \"[$$(date)] Checking for certificate renewal...\";
            /scripts/ssl-manager.sh renew >> /tmp/ssl-monitor.log 2>&1;
          fi;

          echo \"[$$(date)] SSL check completed. Next check in 4 hours.\";
          sleep 14400;
        done
      "

  # ============================================================================
  # COMMENTED OUT SERVICES - Available for future use
  # ============================================================================

  # Gamja IRC Web Client (commented out)
  # gamja:
  #   build:
  #     context: .
  #     dockerfile: src/frontend/gamja/Containerfile
  #   container_name: gamja
  #   hostname: gamja
  #   depends_on:
  #     unrealircd:
  #       condition: service_healthy
  #   volumes:
  #     - ./src/frontend/gamja:/var/www/html/gamja:ro
  #   environment:
  #     - TZ=UTC
  #   ports:
  #     - '8081:80'
  #   networks:
  #     - irc-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost/gamja/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s

  # The Lounge IRC Web Client (commented out)
  # thelounge:
  #   image: thelounge/thelounge:4@sha256:c2aa0916203b298ffaf3a36c4eb60ef73c1006448d430e218d37840472e84e50
  #   container_name: thelounge
  #   hostname: thelounge
  #   depends_on:
  #     unrealircd:
  #       condition: service_healthy
  #   volumes:
  #     - ./data/thelounge:/var/opt/thelounge
  #   networks:
  #     - irc-network
  #   ports:
  #     - '9000:9000'
  #   restart: unless-stopped

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  irc-network:
    name: irc-network
    driver: bridge

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  unrealircd-webpanel-data:
    name: unrealircd-webpanel-data
    driver: local