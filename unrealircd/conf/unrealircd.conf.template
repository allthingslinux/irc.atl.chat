/* Configuration file for UnrealIRCd 6
 *
 * This is a template that uses environment variable substitution.
 * The prepare-config.sh script will substitute ${VARIABLE} with actual values.
 *
 * BEFORE YOU PROCEED:
 * Important: all lines, except { and } end with an ;
 * This is very important, if you miss a ; somewhere then the
 * configuration file parser will complain and the file will not
 * be processed correctly!
 */


/* Configuration is self-contained with environment variable substitution */





/* UnrealIRCd makes heavy use of modules. Modules allow you to completely
 * customize the featureset you wish to enable in UnrealIRCd.
 * See: https://www.unrealircd.org/docs/Modules
 */
include "modules.default.conf";
include "modules.optional.conf";

/* Blacklist control socket module to avoid permission issues */
blacklist-module "control";

/* Now let's include some other files as well */
include "help/help.conf";
include "badwords.conf";
include "spamfilter.conf";
include "dccallow.conf";
include "operclass.default.conf";
include "snomasks.default.conf";
include "rpc.modules.default.conf";

/* Load the default cloaking module (2021 onwards): */
loadmodule "cloak_sha256";

/* WebSocket support for web IRC clients */
loadmodule "websocket";
loadmodule "webserver";

/* Server Configuration */
me {
	name "${IRC_DOMAIN}";
	info "${IRC_NETWORK_NAME} IRC Server";
	sid "001";
}

/* Admin Configuration */
admin {
	"${IRC_ADMIN_NAME}";
	"admin";
	"${IRC_ADMIN_EMAIL}";
}

/* Clients and servers are put in class { } blocks, we define them here. */
class clients {
	pingfreq 90;
	maxclients 1000;
	sendq 200k;
	recvq 8000;
}

/* Special class for IRCOps with higher limits */
class opers {
	pingfreq 90;
	maxclients 50;
	sendq 1M;
	recvq 8000;
}

/* Server class with good defaults */
class servers {
	pingfreq 90;
	maxclients 10;
	sendq 5M;
	recvq 8000;
}

/* Standard IRC port 6667 */
listen {
	ip *;
	port 6667;
}

/* Standard IRC SSL/TLS port 6697 */
listen {
	ip *;
	port 6697;
	options { tls; }
}

/* Special SSL/TLS servers-only port for linking */
listen {
        ip *;
        port 6900;
        options { tls; serversonly; }
}

/* Non-TLS servers-only port for linking (for Atheme) */
listen {
        ip *;
        port 6901;
        options { serversonly; }
}

/* JSON-RPC API port for webpanel */
listen {
	ip *;
	port 8600;
	options { rpc; }
}

/* Secure WebSocket port for web IRC clients (wss://) */
listen {
	ip *;
	port 8000;
	options {
		tls;
		websocket { type text; }
	}
	tls-options {
		certificate "${IRC_SSL_CERT_PATH}";
		key "${IRC_SSL_KEY_PATH}";
		options {
			no-client-certificate;
		}
	}
}

/* TLS configuration with modern security settings */
set {
	tls {
		/* Use SSL certificate paths from environment variables */
		certificate "${IRC_SSL_CERT_PATH}";
		key "${IRC_SSL_KEY_PATH}";

		/* Modern TLS protocols and ciphers for security */
		protocols "TLSv1.2,+TLSv1.3";
		ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";
		ciphersuites "TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_AES_128_CCM_8_SHA256:TLS_AES_128_CCM_SHA256";

		/* Modern ECDH curves for better security */
		ecdh-curves "X25519:secp521r1:secp384r1:prime256v1";

		/* Strict Transport Security (STS) - Automatically redirect users to TLS */
		sts-policy {
			/* Redirect to secure port 6697 */
			port 6697;
			/* Conservative duration - start low and gradually increase
			 * Recommended progression: 1m -> 1d -> 30d -> 180d
			 * WARNING: Users cache this setting for 'duration' time!
			 */
			duration ${IRC_STS_DURATION};
			/* Preload in client (optional, for advanced security) */
			preload ${IRC_STS_PRELOAD};
		}
	}

	/* Plaintext policy - control who can use non-TLS connections */
	plaintext-policy {
		/* Allow services to use plaintext (Atheme doesn't support TLS for server links) */
		server allow;
		/* Allow users for now, but they'll be redirected to TLS via STS if client supports it */
		user allow;
		/* IRCOps should always use TLS for security */
		oper deny;
		/* Helpful message for non-STS clients when we want to enforce TLS */
		user-message "For security, please connect using TLS on port 6697. Your client will be automatically redirected if it supports STS.";
		oper-message "IRCOps must use TLS connections. Please connect to port 6697 with SSL/TLS enabled.";
	}
}

/* Link block for services */
link ${IRC_SERVICES_SERVER} {
	incoming {
		mask *;
	}

	outgoing {
		bind-ip *;
		hostname atheme;
		port 6901;
		options { autoconnect; }
	}

	password "${IRC_SERVICES_PASSWORD}"; /* Services link password */
	class servers;
}

/* U-lines give services special privileges */
ulines {
	${IRC_SERVICES_SERVER};
}

/* Allow Configuration - Who can connect */
allow {
	mask *@*;
	class clients;
	maxperip 5;
}

/* Authentication Requirements - Uncomment and customize as needed */

/* Example 1: Require authentication for users from specific ISPs/countries
require authentication {
	mask *@*.suspicious-isp.com;
	reason "Many troublemakers from this provider. Please authenticate with your registered account.";
};
*/

/* Example 2: Require authentication for everyone (closed server)
require authentication {
	mask *@*;
	reason "This server requires authentication. Please register an account first.";
};
*/

/* Example 3: Require authentication for all except trusted countries
require authentication {
	mask {
		mask *;
		exclude-country { US; CA; GB; DE; FR; AU; }
	}
	reason "Authentication required from your location. Please register an account.";
};
*/

/* Ban nicknames that are reserved for services */
ban nick {
	mask "*ChanServ*";
	reason "Reserved for Services";
}

ban nick {
	mask "*NickServ*";
	reason "Reserved for Services";
}

ban nick {
	mask "*MemoServ*";
	reason "Reserved for Services";
}

ban nick {
	mask "*BotServ*";
	reason "Reserved for Services";
}

ban nick {
	mask "*OperServ*";
	reason "Reserved for Services";
}

ban nick {
	mask "*HostServ*";
	reason "Reserved for Services";
}

ban nick {
	mask "*HelpServ*";
	reason "Reserved for Services";
}

ban nick {
	mask "*StatServ*";
	reason "Reserved for Services";
}

ban nick {
	mask "*Global*";
	reason "Reserved for Services";
}

ban nick {
	mask "*root*";
	reason "Reserved system name";
}

ban nick {
	mask "*admin*";
	reason "Reserved system name";
}

ban nick {
	mask "*administrator*";
	reason "Reserved system name";
}

ban nick {
	mask "*server*";
	reason "Reserved system name";
}

ban nick {
	mask "*services*";
	reason "Reserved for Services";
}

ban nick {
	mask "*IRC*";
	reason "Reserved for network";
}

ban nick {
	mask "*ircop*";
	reason "Reserved for operators";
}

ban nick {
	mask "*operator*";
	reason "Reserved for operators";
}

ban nick {
	mask "*guest*";
	reason "Generic guest name not allowed";
}

ban nick {
	mask "*anonymous*";
	reason "Anonymous connections not allowed";
}

ban nick {
	mask "*unknown*";
	reason "Unknown user not allowed";
}

/* Blacklist configuration for security */
blacklist dronebl {
	dns {
		name dnsbl.dronebl.org;
		type record;
		reply { 3; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; }
	}
	action gline;
	ban-time 24h;
	reason "Proxy/Drone detected. Check https://dronebl.org/lookup?ip=$ip for details.";
}

blacklist efnetrbl {
	dns {
		name rbl.efnetrbl.org;
		type record;
		reply { 1; 4; 5; }
	}
	action gline;
	ban-time 24h;
	reason "Proxy/Drone/TOR detected. Check https://rbl.efnetrbl.org/?i=$ip for details.";
}

blacklist tornevall {
	dns {
		name dnsbl.tornevall.org;
		type record;
		reply { 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; }
	}
	action gline;
	ban-time 24h;
	reason "Open proxy/relay detected. Check https://dnsbl.tornevall.org/ for details.";
}

/* Network configuration */
set {
	network-name 		"${IRC_NETWORK_NAME}";
	default-server 		"${IRC_DOMAIN}";
	services-server 	"${IRC_SERVICES_SERVER}";
	stats-server 		"${IRC_DOMAIN}";
	sasl-server 		"${IRC_SERVICES_SERVER}";

	/* Normal defaults */
	help-channel 		"#support";
	cloak-prefix		"${IRC_CLOAK_PREFIX}";
	prefix-quit 		"quit";

	/* Cloak keys - these should be generated securely */
	cloak-keys {
		"daa0ad2a69ba7683a2cdb02499f2e98b0729423bb7578d1f1dfbcdfe015f1f8b554b13203289c83D";
		"899874eda706ee805bd34792bfd7bd62711f1938dea920c8bdf8396fe136ab6a83785a3ce54eB298";
		"d8936d8fff38eace5c379c94578abfa802088bd241329c64506513fe8e4de3e2304f7dd00355A8d6";
	}
}

/* Operator Configuration */
oper admin {
	class opers;
	mask *@*;
	password "${IRC_OPER_PASSWORD}";
	operclass netadmin-with-override;
	swhois "is the Network Administrator";
	vhost "${IRC_STAFF_VHOST}";
	require-modes "";
}

/* RPC Configuration for Webpanel */
rpc-user "${WEBPANEL_RPC_USER}" {
	match { ip *; }
	rpc-class full;
	password "${WEBPANEL_RPC_PASSWORD}";
}

/* Automatic vhost for registered users */
vhost {
	auto-login yes;
	mask {
		identified yes;
	}
	vhost ${IRC_DOMAIN};
}

/* Logging Configuration */

/* Traditional text logging - human readable */
log {
	source {
		all;
		!debug;
		!join.LOCAL_CLIENT_JOIN;
		!join.REMOTE_CLIENT_JOIN;
		!part.LOCAL_CLIENT_PART;
		!part.REMOTE_CLIENT_PART;
		!kick.LOCAL_CLIENT_KICK;
		!kick.REMOTE_CLIENT_KICK;
	}
	destination {
		file "${IRC_LOG_PATH}/ircd.log" { maxsize 100M; }
	}
}

/* JSON logging - machine readable with detailed information */
log {
	source {
		all;
		!debug;
		!join.LOCAL_CLIENT_JOIN;
		!join.REMOTE_CLIENT_JOIN;
		!part.LOCAL_CLIENT_PART;
		!part.REMOTE_CLIENT_PART;
		!kick.LOCAL_CLIENT_KICK;
		!kick.REMOTE_CLIENT_KICK;
	}
	destination {
		file "${IRC_LOG_PATH}/ircd.json.log" { maxsize 250M; type json; }
	}
}

/* Server specific configuration */
set {
	kline-address '${IRC_ADMIN_EMAIL}'; /* e-mail or URL shown when a user is banned */

	modes-on-connect "+ixw"; /* when users connect, they will get these user modes */
	modes-on-oper "+xws"; /* when someone becomes IRCOp they'll get these modes */
	modes-on-join "+nt"; /* default channel modes when a new channel is created */
	oper-auto-join "#mod-chat"; /* IRCOps are auto-joined to this channel */
	options {
		hide-ulines; /* hide U-lines in /MAP and /LINKS */
		show-connect-info; /* show "looking up your hostname" messages on connect */
	}

	/* Authentication prompt is enabled by default via the authprompt module */

	maxchannelsperuser 10; /* maximum number of channels a user may /JOIN */

	/* The minimum time a user must be connected before being allowed to
	 * use a QUIT message. This will hopefully help stop spam.
	 */
	anti-spam-quit-message-time 10s;

        /* Restrict commands for new users (security hardening) */
        restrict-commands {
                list {
                        except { identified yes; reputation-score 24; }
                        connect-delay 60s;
                }
                invite {
                        except { identified yes; reputation-score 24; }
                        connect-delay 120s;
                }
        }

        /* Anti-flood settings for enhanced security */
        anti-flood {
                /* Settings that apply to everyone */
                everyone {
                        /* Connection flood protection - 3 connections per 60 seconds per IP */
                        connect-flood 3:60;
                        
                        /* Handshake data flood protection */
                        handshake-data-flood {
                                amount 4k;
                                ban-action zline;
                                ban-time 10m;
                        }
                        
                        /* Target flood protection - prevents high-rate flooding of channels/users */
                        target-flood {
                                channel-privmsg 45:5;
                                channel-notice 15:5;
                                channel-tagmsg 15:5;
                                private-privmsg 30:5;
                                private-notice 10:5;
                                private-tagmsg 10:5;
                        }
                }

                /* Settings for known users (registered/trusted users) */
                known-users {
                        nick-flood 4:60;        /* 4 nick changes per 60 seconds */
                        join-flood 4:90;        /* 4 rejoins to same channel per 90 seconds */
                        away-flood 4:120;       /* 4 away changes per 120 seconds */
                        invite-flood 5:60;      /* 5 invites per 60 seconds */
                        knock-flood 4:120;      /* 4 knocks per 120 seconds */
                        vhost-flood 3:90;       /* 3 vhost changes per 90 seconds */
                        max-concurrent-conversations {
                                users 12;               /* Can message 12 different users */
                                new-user-every 10s;     /* Then 1 new user every 10 seconds */
                        }
                        lag-penalty 600;        /* Lower lag penalty for trusted users */
                        lag-penalty-bytes 200;  /* More bytes allowed before extra penalty */
                }

                /* Settings for unknown users (new/untrusted users) */
                unknown-users {
                        nick-flood 2:60;        /* 2 nick changes per 60 seconds */
                        join-flood 2:90;        /* 2 rejoins to same channel per 90 seconds */
                        away-flood 3:120;       /* 3 away changes per 120 seconds */
                        invite-flood 2:60;      /* 2 invites per 60 seconds */
                        knock-flood 2:120;      /* 2 knocks per 120 seconds */
                        vhost-flood 2:90;       /* 2 vhost changes per 90 seconds */
                        max-concurrent-conversations {
                                users 4;                /* Can message 4 different users */
                                new-user-every 20s;     /* Then 1 new user every 20 seconds */
                        }
                        lag-penalty 1200;       /* Higher lag penalty for unknown users */
                        lag-penalty-bytes 80;   /* Fewer bytes allowed before extra penalty */
                }
        }
}

/*
 * ANTI-FLOOD PROTECTION OVERVIEW
 * ===============================
 * 
 * The anti-flood settings above provide comprehensive protection against various types of flooding:
 * 
 * CONNECTION FLOOD PROTECTION:
 * - Limits connections per IP address to prevent connection bombing
 * - Default: 3 connections per 60 seconds per IP
 * 
 * HANDSHAKE DATA FLOOD PROTECTION:
 * - Prevents abuse during IRC protocol handshake
 * - Blocks excessive data during connection establishment
 * - Results in 10-minute Z-line for violators
 * 
 * TARGET FLOOD PROTECTION:
 * - Prevents high-rate flooding of channels and users
 * - Limits total messages to any target (channel/user) regardless of source count
 * - Protects against coordinated flooding attacks
 * 
 * USER-BASED FLOOD PROTECTION:
 * - Different limits for known-users vs unknown-users
 * - Known users: Registered with services OR reputation score 25+
 * - Unknown users: New/unregistered users with lower trust
 * 
 * COMMAND RATE LIMITING:
 * - Nick changes, channel joins, away messages, invites, knocks
 * - Private message conversation limits to prevent spam bots
 * - Lag penalty system prevents command flooding
 * 
 * SECURITY PHILOSOPHY:
 * - Balanced approach: Strict enough to prevent abuse, lenient enough for normal use
 * - Graduated penalties: Unknown users have stricter limits than known users
 * - Multiple protection layers: Per-IP, per-user, and per-target limits
 */

/*
 * STRICT TRANSPORT SECURITY (STS) SECURITY PROGRESSION
 * ====================================================
 * 
 * STS automatically redirects capable clients from plaintext (port 6667) to TLS (port 6697).
 * 
 * PHASE 1 - TESTING (First week):
 * - IRC_STS_DURATION=1m (1 minute cache)
 * - IRC_STS_PRELOAD=no
 * - plaintext-policy user=allow (users can still use plaintext if STS fails)
 * 
 * PHASE 2 - GRADUAL ROLLOUT (After 1 week):
 * - IRC_STS_DURATION=1d (1 day cache)  
 * - Monitor for any user connection issues
 * 
 * PHASE 3 - MATURE NETWORK (After 1 month):
 * - IRC_STS_DURATION=30d (30 days cache)
 * - Consider IRC_STS_PRELOAD=yes for advanced security
 * 
 * PHASE 4 - MAXIMUM SECURITY (After 6 months):
 * - IRC_STS_DURATION=180d (6 months cache)
 * - Optional: Set plaintext-policy user=deny to force TLS for all users
 * - Optional: Remove port 6667 listen block entirely
 * 
 * SUPPORTED CLIENTS: mIRC, AdiIRC, IRCCloud, The Lounge, Ambassador, GLirc, 
 * CoreIRC, BitBot, Limnoria, and many others.
 * 
 * NON-STS CLIENTS: Will continue using plaintext unless plaintext-policy denies them.
 */

/*
 * CHANNEL ANTI-FLOOD RECOMMENDATIONS
 * ==================================
 * 
 * Operators can use channel mode +f for automatic flood protection:
 * 
 * Recommended for large channels (50+ users):
 * /MODE #channel +f [50j#i10,75m#m10,7c#C15,10n#N15,30k#K10]:15
 * 
 * Recommended for medium channels (10-50 users):  
 * /MODE #channel +f [30j#i10,40m#m10,7c#C15,10n#N15,30k#K10]:15
 * 
 * Recommended for small channels (<10 users):
 * /MODE #channel +f [15j#i5,20m#m5,5c#C10,7n#N10,15k#K5]:15
 * 
 * Format explanation:
 * - 30j#i10 = 30 joins per 15 seconds, set +i for 10 minutes if exceeded
 * - 40m#m10 = 40 messages per 15 seconds, set +m for 10 minutes if exceeded  
 * - 7c#C15 = 7 CTCPs per 15 seconds, set +C for 15 minutes if exceeded
 * - 10n#N15 = 10 nick changes per 15 seconds, set +N for 15 minutes if exceeded
 * - 30k#K10 = 30 knocks per 15 seconds, set +K for 10 minutes if exceeded
 * 
 * Emergency flood protection modes for operators:
 * - +M = Only registered users can talk
 * - +N = No nick changes allowed
 * - +C = No CTCPs allowed  
 * - +K = No /KNOCK allowed
 * - +i = Invite only
 * - +m = Moderated (only voiced+ can talk)
 */

/*
 * SASL AUTHENTICATION GUIDE
 * =========================
 * 
 * SASL allows users to authenticate to services before they are fully online.
 * This configuration enables SASL support with modern SCRAM-SHA-256 authentication.
 * 
 * BENEFITS:
 * - Universal identification method (no need for /NS IDENTIFY)
 * - Early authentication receives proper vhost and modes
 * - Can join registered-only channels immediately
 * - Works during connection throttling attacks
 * - Enables selective authentication requirements
 * 
 * CLIENT SETUP EXAMPLES:
 * 
 * mIRC:
 * - File -> Select Server -> Edit -> Login Method: SASL (/CAP)
 * - Enter your services password
 * 
 * irssi:
 * - /NETWORK ADD -sasl_username yourname -sasl_password yourpass -sasl_mechanism SCRAM-SHA-256 NetworkName
 * 
 * HexChat:
 * - Network List -> Edit -> Login method: SASL (username + password)
 * - Enter your services username and password
 * 
 * TESTING SASL:
 * - Connect to server and run: /QUOTE CAP LS
 * - Look for 'sasl' in the capability list
 * - If present, SASL is working correctly
 * 
 * SOFT BANS (Dynamic Authentication Requirements):
 * IRCOps can require authentication dynamically using soft bans:
 * - /GLINE %*@*.suspicious-domain.com 0 Please authenticate to access this server
 * - /KLINE %*@192.168.1.* 0 Authentication required from your IP range
 * The % prefix makes the ban only affect unauthenticated users.
 * 
 * AUTHENTICATION TYPES SUPPORTED:
 * - SCRAM-SHA-256 (most secure, recommended)
 * - SCRAM-SHA-1 (legacy compatibility)
 * - PLAIN (basic, use only over TLS)
 * 
 * SECURITY NOTES:
 * - Always use TLS when possible to protect credentials
 * - SCRAM mechanisms are much more secure than PLAIN
 * - Consider requiring authentication for proxy/VPN users
 * - Monitor for authentication bypass attempts
 */